import { Request, Response } from 'express';
import { LowdbService } from '../../lowdb/lowdb.service';
export declare class TransferenciasAPPWEBMockController {
    private readonly lowdbService;
    constructor(lowdbService: LowdbService);
    initTransferencias(): Promise<void>;
    cargaTransferenciaIndividual(headers: any, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    transferenciaFirma(headers: any, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    transferenciaEnvio(headers: any, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    obtieneConsultaAgenda(req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    getComprobantesTransacciones(req: Request, res: Response): Response<any, Record<string, any>>;
    getUnicoComprobanteTransaccion(req: Request, res: Response): Response<any, Record<string, any>>;
    descargaArchivoConsultaAgenda(req: Request, res: Response): void;
    getAprobador(headers: any, res: Response): Promise<Response<any, Record<string, any>>>;
    modificarDestinatario(cbu: any, tipoCuentaId: any, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    obtieneDatosCbu(req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    agendarDestinatario(req: any, res: Response): Promise<Response<any, Record<string, any>>>;
    getDetalleCbu(req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    descargaDetalleDestinatario(req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    getAgendaDestinatarios(req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    eliminarDestinatario(res: Response): void;
    aprobarDestinatariosAgenda(req: any, res: Response): Promise<Response<any, Record<string, any>>>;
    consultaTransferencias(req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    modificarTransferenciaTOFF(nroTran: any, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    getFirmantesDetalleTransferencia(headers: any, req: Request, res: Response): Promise<Response<any, Record<string, any>>>;
    obtenerLimitesTransferencias(headers: any, req: any, res: Response): Promise<Response<any, Record<string, any>>>;
    getConfiguracion(res: Response): void;
    obtenerComprobanteTransferencias(headers: any, nroTransferencia: any, req: any, res: Response): Promise<Response<any, Record<string, any>>>;
    getMapTransferencia(transferencia: any, banco: string, tipoCuentaDebito: string): any;
    reFormatDate(fecha: string): string;
    extraerDatosFiltroDestinatarios(searchList: any): any;
    buscarDestinatarios(listaSearch: any, destinatarios: any[]): any[];
    getUsuario(authorization: any): Promise<any>;
    firmarTransferencia(transferencia: any, usuario: any, cuit: any): Promise<{
        codigoResultado: string;
        descripcionResultado: string;
        nroOperacion: any;
        estado: any;
    }>;
    enviarTransferencia(transferencia: any, resultadoSeleccionado: any): Promise<{
        codigoResultado: any;
        descripcionResultado: any;
        nroOperacion: any;
        estado: any;
    }>;
    actualizarBD(key: any, value: any): Promise<void>;
    cuentaEmpresa(cuit: any, numeroCuenta: any): Promise<any>;
    isFirmaCompleta(firmantes: any, firmas: any): void;
    eliminaTransferencia(req: Request, res: Response): void;
}
